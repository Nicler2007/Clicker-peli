// Alustetaan muuttujat
let coins = 0;
let autoCollectorLevel = 0;  // Ker√§√§j√§n taso
let autoCollectorCost = 50;   // Ensimm√§inen p√§ivitys maksaa 50 kolikkoa
let autoCollectorRate = 0.1;  // Aluksi ker√§√§j√§ tuottaa 0.1 kolikkoa per sekunti
let autoCollectorInterval = null;  // T√§m√§ muuttuja pit√§√§ kirjaa automaattisen ker√§√§j√§n toiminnasta

let handLevel = 0; // K√§si on aluksi tasolla 0
let handRate = 1;  // K√§si antaa 1 kolikon per t√∂kk√§ys, kun taso on 1



// CHEATMODE ENABLED!
document.getElementById("cheatButton").addEventListener("click", function() {
    coins += 100;  // Lis√§√§ 100 kolikkoa
    updateCounter();  // P√§ivitt√§√§ kolikon m√§√§r√§n n√§yt√∂ll√§
});




// Funktio, joka soittaa √§√§nen
function playCoinSound() {
    let sound = document.getElementById("coinSound");
    sound.currentTime = 0; // Nollaa √§√§nen, jos se on jo soimassa
    sound.play();
}

// Funktio, joka soittaa √§√§nen
function playCashSound() {
    let sound = document.getElementById("cashSound");
    sound.currentTime = 0; // Nollaa √§√§nen, jos se on jo soimassa
    sound.play();
}


// Esimerkki: Kolikon ker√§√§misen yhteydess√§ soitetaan √§√§ni (((((((((((((((T√ÑM√Ñ ON T√ÑRKE√Ñ)))))))))))))))!!!!
document.getElementById("money-tree").addEventListener("click", function() {
    coins += 1;  // Lis√§√§ kolikko
    updateCounter(); // P√§ivitt√§√§ n√§yt√∂n
    playCoinSound(); // üîä Soittaa kolikon √§√§nen
});




document.getElementById("buyHandButton").addEventListener("click", function() {
    // Osta k√§si -toiminto
    if (coins >= 50) {
        coins -= 50; // V√§hennet√§√§n kolikoita
        handLevel = 1; // Asetetaan k√§den taso 1:ksi
        handRate = 1; // Sormen antama kolikkojen m√§√§r√§ tasolla 1 on 1
        updateCounter(); // P√§ivitet√§√§n kolikot n√§kyville
        playCashSound(); // üîä Soittaa √§√§nen

        // Vaihdetaan ostopainike p√§ivityspainikkeeksi
        const buyButton = document.getElementById("buyHandButton");
        buyButton.textContent = `P√§ivit√§ K√§si (Max. hinta: ${handLevel * 100} kolikkoa) - Tasosi: ${handLevel}`;  // Muutetaan painikkeen teksti
        buyButton.removeEventListener("click", arguments.callee);  // Poistetaan alkuper√§inen kuuntelija
        buyButton.addEventListener("click", levelUpHand);  // Lis√§t√§√§n kuuntelija tasonnostolle

        // N√§ytet√§√§n k√§si ja k√§ynnistet√§√§n animaatio
        document.getElementById("hand-container").style.display = "block";
        startHandAnimation();
    } else {
        alert("Ei tarpeeksi kolikoita!");
    }
});

function startHandAnimation() {
    // K√§ynnistet√§√§n sormen animaatio, joka osuu kuvaan sekunnin v√§lein
    document.getElementById("hand").addEventListener("animationiteration", function() {
        giveCoinFromHand();
    });
}

function giveCoinFromHand() {
    // Lis√§t√§√§n kolikoita k√§sin tasosta riippuen
    coins += handRate;
    updateCounter();
}

function updateCounter() {
    // P√§ivitet√§√§n kolikoiden m√§√§r√§ ja taso
    document.getElementById("counter").textContent = "Kolikot: " + coins.toFixed(1);
    document.getElementById("handLevel").textContent = `K√§si taso: ${handLevel}`;  // N√§ytet√§√§n k√§den taso

    // P√§ivitet√§√§n k√§den taso p√§ivityspainikkeessa
    const buyButton = document.getElementById("buyHandButton");
    buyButton.textContent = `P√§ivit√§ K√§si (Max. hinta: ${handLevel * 100} kolikkoa) - Tasosi: ${handLevel}`;  // Lis√§√§ taso n√§kyviin
}

// Funktio p√§ivitt√§√§ sormen tason ja palkkiot
function levelUpHand() {
    const upgradeCost = handLevel * 100;  // Tasolle n nostaminen maksaa n * 100 kolikoita
    if (coins >= upgradeCost) {  // Tarkistetaan onko tarpeeksi kolikoita
        coins -= upgradeCost;
        handLevel++;
        handRate = handLevel; // P√§ivitet√§√§n sormen antama kolikkojen m√§√§r√§
        updateCounter();

        // P√§ivitet√§√§n p√§ivityspainikkeen teksti
        const buyButton = document.getElementById("buyHandButton");
        buyButton.textContent = `P√§ivit√§ K√§si (Max. hinta: ${handLevel * 100} kolikkoa) - Tasosi: ${handLevel}`;  // P√§ivitet√§√§n p√§ivityshinta ja taso
    } else {
        alert("Ei tarpeeksi kolikoita!");
    }
}






// Osta automaattiker√§√§j√§
function buyAutoCollector() {
    if (coins >= autoCollectorCost) {
        coins -= autoCollectorCost;  // V√§hennet√§√§n kolikoita
        autoCollectorLevel++;         // Nostetaan ker√§√§j√§n tasoa
        autoCollectorRate += 0.1;     // Kasvatetaan tuotantoa
        autoCollectorCost = Math.floor(autoCollectorCost * 2);  // Seuraava p√§ivitys maksaa 100 kolikkoa enemm√§n

        // Jos ker√§√§j√§ on ostettu, k√§ynnistet√§√§n se (jos se ei ole jo k√§ynniss√§)
        if (autoCollectorInterval === null) {
            startAutoCollector();
        }

        updateCounter();  // P√§ivitet√§√§n k√§ytt√∂liittym√§
    } else {
        alert("Sinulla ei ole tarpeeksi kolikoita!");
    }
}

// K√§ynnistet√§√§n automaattinen ker√§√§j√§
function startAutoCollector() {
    autoCollectorInterval = setInterval(() => {
        coins += autoCollectorRate;  // Lis√§√§ kolikoita ker√§√§j√§n tuoton mukaan
        updateCounter();
    }, 1000); // P√§ivitt√§√§ joka sekunti
}

// Estet√§√§n automaattinen ker√§√§j√§ ennen ostopainiketta
function stopAutoCollector() {
    if (autoCollectorInterval !== null) {
        clearInterval(autoCollectorInterval);
        autoCollectorInterval = null;
    }
}
